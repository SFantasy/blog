<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | fanTasy | blog]]></title>
  <link href="http://SFantasy.github.com/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://SFantasy.github.com/"/>
  <updated>2012-11-26T23:03:48+08:00</updated>
  <id>http://SFantasy.github.com/</id>
  <author>
    <name><![CDATA[fanTasy shAo]]></name>
    <email><![CDATA[forever.fantasy27@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A byte things about UNIX Shell]]></title>
    <link href="http://SFantasy.github.com/blog/2012/11/26/a-byte-things-about-unix-shell/"/>
    <updated>2012-11-26T11:11:00+08:00</updated>
    <id>http://SFantasy.github.com/blog/2012/11/26/a-byte-things-about-unix-shell</id>
    <content type="html"><![CDATA[<p>最近在图书馆翻到了一本《Unix 技术手册（第三版）》，这本书是SVR4（System V Release 4）和Solaris7的技术参考手册；其实旁边还有一本相对比较新的第四版，不过那本太厚，而且琢磨着应该差不了多少，于是就拿着它翻了起来。
记得之前在看《鸟哥的Linux私房菜》的时候差不多翻到“学习shell与shell script”那一章，所以在阅读完介绍Unix的那一章以及跳过一大刀Unix命令的第二章后，看到了Unix shell的部分。</p>

<h2>Unix Shell</h2>

<h4>用途：</h4>

<p>1.交互式使用；2.定制Unix会话；3.编程。</p>

<h4>种类：</h4>

<p>1.Bourne shell；</p>

<p>2.Korn shell；</p>

<p>3.C shell。</p>

<p>我们常用的默认shell一般都是bash，也就是被Linus吐槽为“丑陋名称的”“Bourne-again shell”，也有听说是“Born-again shell”的意思。但是不管如何，bash总归是sh的超集（superset）；Korn shell (ksh) 也是 Bourne shell(sh)的增强版，不过与bash不同的是，ksh是贝尔实验室的一个名叫 David Korn 写的，而bash属于鼎鼎大名的GNU项目，所以使得所有的GUN/Linux（当然，还有Mac OS X）的默认shell 是bash。</p>

<p>当然，书中还提到了更加适合交互使用的C shell(csh)，一个从Berkeley孵化出来的shell版本，所以它也理所应当地在BSD(Berkeley Software Distribution)成为了默认shell。</p>

<p>我们可以在Linux 中用以下形式的命令来切换当前使用的shell：</p>

<pre><code>exec ksh
</code></pre>

<p>接下来简单的介绍一下bash的功能:</p>

<ul>
<li><p>输入输出重定向
  e.g.
  echo "This is an example" > a.txt
  #将输出文本重定向（在这里也就是保存）到一个文件中</p></li>
<li><p>文件名缩写用的通配符（元字符）
所谓通配符，举例来说：我们要删除所有文件格式为“.txt”的文件，使用“rm <em>.txt”就可以了，其中</em>就是所谓的“通配符”。</p></li>
<li><p>定制环境的shell变量</p></li>
<li><p>写shell程序用的内置命令集
  e.g.
  echo"hello bash"
  #输出字符串
  exit
  #退出bash
  wait
  #等待活动作业的完成
  type cmd
  #查看一个命令是否是bash的内置命令</p></li>
<li><p>作业控制</p>

<p>  e.g.
  bg
  #将作业置于后台运行
  fg
  #将作业置于前台运行
  jobs
  #查看当前活动作业
  kill
  #终止某作业
  wait
  #等待后台作业完成
  C-z
  #挂起当前作业</p></li>
<li><p>命令行编辑</p></li>
<li><p>命令历史</p></li>
</ul>


<p>可以输入“history”查看内存中所有的记忆下来的命令。当然也可以使用"history number“来查看最近number条的记录。</p>

<ul>
<li>别名
  e.g.
  alias lm = ls -l | more
  #今后在bash中输入"lm" 就相当于输入了 "ls -l | more"</li>
</ul>


<p>当然将”alias“替换为”unalias“就可以将刚才设置好的别名去掉。</p>
]]></content>
  </entry>
  
</feed>
