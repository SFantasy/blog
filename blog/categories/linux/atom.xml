<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | fanTasy | blog]]></title>
  <link href="http://SFantasy.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://SFantasy.github.com/"/>
  <updated>2012-11-26T23:03:48+08:00</updated>
  <id>http://SFantasy.github.com/</id>
  <author>
    <name><![CDATA[fanTasy shAo]]></name>
    <email><![CDATA[forever.fantasy27@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A byte things about UNIX Shell]]></title>
    <link href="http://SFantasy.github.com/blog/2012/11/26/a-byte-things-about-unix-shell/"/>
    <updated>2012-11-26T11:11:00+08:00</updated>
    <id>http://SFantasy.github.com/blog/2012/11/26/a-byte-things-about-unix-shell</id>
    <content type="html"><![CDATA[<p>最近在图书馆翻到了一本《Unix 技术手册（第三版）》，这本书是SVR4（System V Release 4）和Solaris7的技术参考手册；其实旁边还有一本相对比较新的第四版，不过那本太厚，而且琢磨着应该差不了多少，于是就拿着它翻了起来。
记得之前在看《鸟哥的Linux私房菜》的时候差不多翻到“学习shell与shell script”那一章，所以在阅读完介绍Unix的那一章以及跳过一大刀Unix命令的第二章后，看到了Unix shell的部分。</p>

<h2>Unix Shell</h2>

<h4>用途：</h4>

<p>1.交互式使用；2.定制Unix会话；3.编程。</p>

<h4>种类：</h4>

<p>1.Bourne shell；</p>

<p>2.Korn shell；</p>

<p>3.C shell。</p>

<p>我们常用的默认shell一般都是bash，也就是被Linus吐槽为“丑陋名称的”“Bourne-again shell”，也有听说是“Born-again shell”的意思。但是不管如何，bash总归是sh的超集（superset）；Korn shell (ksh) 也是 Bourne shell(sh)的增强版，不过与bash不同的是，ksh是贝尔实验室的一个名叫 David Korn 写的，而bash属于鼎鼎大名的GNU项目，所以使得所有的GUN/Linux（当然，还有Mac OS X）的默认shell 是bash。</p>

<p>当然，书中还提到了更加适合交互使用的C shell(csh)，一个从Berkeley孵化出来的shell版本，所以它也理所应当地在BSD(Berkeley Software Distribution)成为了默认shell。</p>

<p>我们可以在Linux 中用以下形式的命令来切换当前使用的shell：</p>

<pre><code>exec ksh
</code></pre>

<p>接下来简单的介绍一下bash的功能:</p>

<ul>
<li><p>输入输出重定向
  e.g.
  echo "This is an example" > a.txt
  #将输出文本重定向（在这里也就是保存）到一个文件中</p></li>
<li><p>文件名缩写用的通配符（元字符）
所谓通配符，举例来说：我们要删除所有文件格式为“.txt”的文件，使用“rm <em>.txt”就可以了，其中</em>就是所谓的“通配符”。</p></li>
<li><p>定制环境的shell变量</p></li>
<li><p>写shell程序用的内置命令集
  e.g.
  echo"hello bash"
  #输出字符串
  exit
  #退出bash
  wait
  #等待活动作业的完成
  type cmd
  #查看一个命令是否是bash的内置命令</p></li>
<li><p>作业控制</p>

<p>  e.g.
  bg
  #将作业置于后台运行
  fg
  #将作业置于前台运行
  jobs
  #查看当前活动作业
  kill
  #终止某作业
  wait
  #等待后台作业完成
  C-z
  #挂起当前作业</p></li>
<li><p>命令行编辑</p></li>
<li><p>命令历史</p></li>
</ul>


<p>可以输入“history”查看内存中所有的记忆下来的命令。当然也可以使用"history number“来查看最近number条的记录。</p>

<ul>
<li>别名
  e.g.
  alias lm = ls -l | more
  #今后在bash中输入"lm" 就相当于输入了 "ls -l | more"</li>
</ul>


<p>当然将”alias“替换为”unalias“就可以将刚才设置好的别名去掉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于文件权限]]></title>
    <link href="http://SFantasy.github.com/blog/2012/08/01/guan-yu-wen-jian-quan-xian/"/>
    <updated>2012-08-01T11:10:00+08:00</updated>
    <id>http://SFantasy.github.com/blog/2012/08/01/guan-yu-wen-jian-quan-xian</id>
    <content type="html"><![CDATA[<p>记得原来的时候是看过相关的内容的，但是没有去记忆，所以看到的时候还是会说：“啊，原来是这样的啊！”</p>

<pre><code>-rw-r--r-- 1 root root 42304 Sep 4 18:26 install.log
</code></pre>

<p>其中第一个字符代表的是这个文件是“目录、文件或链接文件等”。如果是“d”即directory，是“l”则是linkfile，是“-”则是普通文件（若是b则是设备文件里面的可供存储的接口设备，c则是设备文件里面的串行端口设备）。后九个字符分别代表的是文件所有者权限、文件所属用户组的权限、其他人对此文件的权限（r即可读，w即可写，x即可执行）。</p>

<p>之后的数字代表的是文件的连接数；后两单词分别为文件所有者和文件所属用户组；43204即文件大小；之后便是文件最近修改日期和文件名。</p>

<p>平时对某些文件没有修改权限的时候，就经常会用到以下shell命令</p>

<pre><code>chmod 770 a.c
</code></pre>

<p>chmod是改变文件权限的命令，这个简单（而chgrp则是改变文件所属用户组，chown是改变文件所有者的命令），但是770的含义我本来是不知道的- -！</p>

<p>原来，三个数字代表着三种身份：owner、group、others对于文件的权限。</p>

<p>其中，r对应4，w对应2，x对应1；那么7也就是有读写和执行的权限，770也就是对于owner和group有着读写和执行的权限，但是对于others没有相关权限，当然，你也可以让others有相关的权限：</p>

<pre><code>chmod 777 a.c
</code></pre>

<p>还有就是关于chmod（chgrp&amp;&amp;chown）的一个比较重要的参数：-r（recursion）</p>

<p>比如对于一个目录而言，修改其所属用户组为users（存在这个用户组的前提下）</p>

<pre><code>chgrp users test
</code></pre>

<p>那么在这个test目录下其他的文件或者子文件夹也要一律修改所属用户组的话添加-r参数就可以了，即</p>

<pre><code>chgrp -r users test
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[忘记Root密码]]></title>
    <link href="http://SFantasy.github.com/blog/2012/07/01/wang-ji-rootmi-ma/"/>
    <updated>2012-07-01T11:18:00+08:00</updated>
    <id>http://SFantasy.github.com/blog/2012/07/01/wang-ji-rootmi-ma</id>
    <content type="html"><![CDATA[<p>最近终于开始有点想看书的心思了，于是捧起鸟哥的“大作”开始啃了起来（《鸟哥的Linux私房菜》），以下空间用来Mark一下本人曾经遇到过的问题或者不曾理解的内容，由于水平有限，各种槽点请轻吐……</p>

<p>    </p>

<p>    记得第一次安装完Fedora之后就急匆匆地跑去上体育课了，然后回来居然怎么都无法正确的输入系统的密码，所以也就悲剧地无法进入系统的T<sup>T……记得Google了一些内容无果后，最终在室友的强烈建议下重装了系统。</sup></p>

<p>    “你只要以单用户维护模式登录即可更改你的root帐号密码。由于lilo这个引导程序已经很少见了，这里使用grub引导装载程序作为范例来介绍。</p>

<p>先将系统重启，在读秒的时候按下任意键就会出现如下内容：</p>

<pre><code>root (hd0,0)

kernel /vmlinuz-2.6.18-128.e15 ro root=LABEL=/ rhgb quiet

initrd /initrd-2.6.18-128.e15.img
</code></pre>

<p>时，请将光标移动到kernel那一行，再按一次e进入kernel该行的编辑界面中，然后在出现的界面当中，最后方输入single:</p>

<pre><code>kernel /vmlinuz-2.6.18-128.e15 ro root=LABEL=/ rhgb quieet single
</code></pre>

<p>再按下Enter确定之后，按下b就可以开机进入单用户维护模式了。在这个模式之下，你会在tty1的地方不需要输入密码即可取得终端的控制权（而且是使用root的身份）。之后就能够修改root的密码了，请使用下面的命令来修改root的密码。</p>

<pre><code>[root@www~]#passwd
</code></pre>

<p>接下来系统会要求你输入两次新的密码，然后再来reboot即可顺利修改root密码了。”（摘自《鸟哥的Linux私房菜（第三版）》）</p>
]]></content>
  </entry>
  
</feed>
